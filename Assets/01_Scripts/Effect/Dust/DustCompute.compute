// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSDust

RWStructuredBuffer<float3> _Instances;

StructuredBuffer<float> _RandBuffer;
float4 _Rect; // xy -> pos , zw -> size

// 남은 시간을 받아와서
// 남은시간이 적을수록 점점 사라질 확률을 높여준다.
float _TotalTime;
float _LeftTime;

float2 _BoxierValue; // from 0 to 1

float2 _Dir;

uint2 to2D(float id)
{
    return uint2(id % _Rect.z, id / _Rect.z);
}

[numthreads(256,1,1)]
void CSDust (uint3 id : SV_DispatchThreadID)
{
    float2 posOS = float2(to2D(id.x));
    float extentX = _Rect.z * 0.5;
    float passedTime = _TotalTime - _LeftTime;
    
    float clip = _RandBuffer[id.x]
        - smoothstep(0, _TotalTime, passedTime)
        - smoothstep(0, _Rect.w , posOS.y * (1.0 - _BoxierValue.y))
        - smoothstep(0, extentX, abs(posOS.x - extentX) * (1.0 - _BoxierValue.x));
    
    float2 dirOffset = round(_Dir * passedTime);
    
    float2 posWS = posOS + _Rect.xy + 0.5f + dirOffset;
    
    _Instances[id.x] = float3(posWS, clip); // 그리드 맞추기위해 +0.5f 
}